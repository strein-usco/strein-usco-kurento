#!/usr/bin/env node
/*
 * (C) Copyright 2014-2015 Kurento (http://kurento.org/)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
var app = require('../app');
var debug = require('debug')('node-crud:server');
//var express = require('express');
var path = require('path');
var url = require('url');
var ws = require('ws');
var minimist = require('minimist');
var kurento = require('kurento-client');
var fs    = require('fs');
var https = require('https');
var http = require('http');
let messageChat =  require('../models/messageChat');


var argv = minimist(process.argv.slice(2), {
  default: {
      as_uri: "https://localhost:3000/",
      ws_uri: "ws://localhost:8888/kurento"
  }
});

var options =
{
  key:  fs.readFileSync('keys/server.key'),
  cert: fs.readFileSync('keys/server.crt')
};

//var app = express();

/*
 * Definition of global variables.
 */
var idCounter = 0;
var candidatesQueue = {};
var kurentoClient = null;
var presenter = null;
var viewers = [];
var noPresenterMessage = 'No active presenter. Try again later...';

/*
 * Server startup
 */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
app.set('options',options);

//var asUrl = url.parse(argv.as_uri);
//var port = asUrl.port;
var server = https.createServer(options, app).listen(port, "0.0.0.0");

/**
 * Listen on provided port, on all network interfaces.
 */

//server.listen(port,"0.0.0.0");
//server.listen(port);
//io.attach(server);
server.on('error', onError);
server.on('listening', onListening);

/*var wss = new ws.Server({
    server : server,
    path : '/one2many'
});*/
var io = require('socket.io')(server);


function nextUniqueId() {
  idCounter++;
  return idCounter.toString();
}

/*
 * Management of WebSocket messages
 */
//wss.on('connection', function(ws) {
io.on('connection', function (socket) {

  var sessionId = nextUniqueId();
  console.log('Connection received with sessionId ' + sessionId);

    socket.on('error', function (data) {
    //ws.on('error', function(error) {
        console.log('Connection ' + sessionId + ' error');
        stop(sessionId);
    });

    socket.on('close', function() {
    //ws.on('close', function() {
        console.log('Connection ' + sessionId + ' closed');
        stop(sessionId);
    });

    socket.on('message', function(message) {
    //ws.on('message', function(_message) {
        //var message = JSON.parse(_message);
        console.log('Connection ' + sessionId + ' received message ', message);

        switch (message.id) {
        case 'presenter':
      startPresenter(sessionId, socket, message.sdpOffer, function(error, sdpAnswer) {
      //startPresenter(sessionId, ws, message.sdpOffer, function(error, sdpAnswer) {
        if (error) {
          /*return ws.send(JSON.stringify({
            id : 'presenterResponse',
            response : 'rejected',
            message : error
          }));*/
          return socket.emit({
            id : 'presenterResponse',
            response : 'rejected',
            message : error
          });
        }
        /*ws.send(JSON.stringify({
          id : 'presenterResponse',
          response : 'accepted',
          sdpAnswer : sdpAnswer
        }));*/
        console.log("EL PRESENTADOR HA ENVIADO UNA OFERTA ........................................................................")
        socket.emit({
          id : 'presenterResponse',
          response : 'accepted',
          sdpAnswer : sdpAnswer
        });
      });
      break;

        case 'viewer':
          startViewer(sessionId, socket, message.sdpOffer, function(error, sdpAnswer) {
          //startViewer(sessionId, ws, message.sdpOffer, function(error, sdpAnswer) {
            if (error) {
              /*return ws.send(JSON.stringify({
                id : 'viewerResponse',
                response : 'rejected',
                message : error
              }));*/
              return socket.emit({
                id : 'viewerResponse',
                response : 'rejected',
                message : error
              });
              console.log("error  en start viewer")
            }

            /*ws.send(JSON.stringify({
              id : 'viewerResponse',
              response : 'accepted',
              sdpAnswer : sdpAnswer
            }));*/
            socket.emit({
              id : 'viewerResponse',
              response : 'accepted',
              sdpAnswer : sdpAnswer
            });
            console.log("se envia viewer respuesta")
          });
        break;

        case 'stop':
            stop(sessionId);
            break;

        case 'onIceCandidate':
            onIceCandidate(sessionId, message.candidate);
            break;

        default:
            /*ws.send(JSON.stringify({
                id : 'error',
                message : 'Invalid message ' + message
            }));*/
            socket.emit({
                id : 'error',
                message : 'Invalid message ' + message
            });
            break;
        }
    });
});

/*
 * Definition of functions
 */

// Recover kurentoClient for the first time.
function getKurentoClient(callback) {
    if (kurentoClient !== null) {
        return callback(null, kurentoClient);
    }

    kurento(argv.ws_uri, function(error, _kurentoClient) {
        if (error) {
            console.log("Could not find media server at address " + argv.ws_uri);
            return callback("Could not find media server at address" + argv.ws_uri
                    + ". Exiting with error " + error);
        }

        kurentoClient = _kurentoClient;
        callback(null, kurentoClient);
    });
}

function startPresenter(sessionId, socket, sdpOffer, callback) {
//function startPresenter(sessionId, ws, sdpOffer, callback) {
  clearCandidatesQueue(sessionId);

  if (presenter !== null) {
    stop(sessionId);
    return callback("Another user is currently acting as presenter. Try again later ...");
  }

  presenter = {
    id : sessionId,
    pipeline : null,
    webRtcEndpoint : null
  }

  getKurentoClient(function(error, kurentoClient) {
    if (error) {
      stop(sessionId);
      return callback(error);
    }

    if (presenter === null) {
      stop(sessionId);
      return callback(noPresenterMessage);
    }

    kurentoClient.create('MediaPipeline', function(error, pipeline) {
      if (error) {
        stop(sessionId);
        return callback(error);
      }

      if (presenter === null) {
        stop(sessionId);
        return callback(noPresenterMessage);
      }

      presenter.pipeline = pipeline;
      pipeline.create('WebRtcEndpoint', function(error, webRtcEndpoint) {
        if (error) {
          stop(sessionId);
          return callback(error);
        }

        if (presenter === null) {
          stop(sessionId);
          return callback(noPresenterMessage);
        }

        presenter.webRtcEndpoint = webRtcEndpoint;

                if (candidatesQueue[sessionId]) {
                    while(candidatesQueue[sessionId].length) {
                        var candidate = candidatesQueue[sessionId].shift();
                        webRtcEndpoint.addIceCandidate(candidate);
                    }
                }

                webRtcEndpoint.on('OnIceCandidate', function(event) {
                    var candidate = kurento.getComplexType('IceCandidate')(event.candidate);
                    /*ws.send(JSON.stringify({
                        id : 'iceCandidate',
                        candidate : candidate
                    }));*/
                    socket.emit({
                      id : 'iceCandidate',
                      candidate : candidate
                    });
                });

        webRtcEndpoint.processOffer(sdpOffer, function(error, sdpAnswer) {
          if (error) {
            stop(sessionId);
            return callback(error);
          }

          if (presenter === null) {
            stop(sessionId);
            return callback(noPresenterMessage);
          }

          callback(null, sdpAnswer);
        });

                webRtcEndpoint.gatherCandidates(function(error) {
                    if (error) {
                        stop(sessionId);
                        return callback(error);
                    }
                });
            });
        });
  });
}

function startViewer(sessionId, socket, sdpOffer, callback) {
//function startViewer(sessionId, ws, sdpOffer, callback) {
  clearCandidatesQueue(sessionId);

  if (presenter === null) {
    stop(sessionId);
    return callback(noPresenterMessage);
  }

  presenter.pipeline.create('WebRtcEndpoint', function(error, webRtcEndpoint) {
    if (error) {
      stop(sessionId);
      return callback(error);
    }
    /*viewers[sessionId] = {
      "webRtcEndpoint" : webRtcEndpoint,
      "ws" : ws
    }*/
    viewers[sessionId] = {
      "webRtcEndpoint" : webRtcEndpoint,
      "socket" : socket
    }

    if (presenter === null) {
      stop(sessionId);
      return callback(noPresenterMessage);
    }

    if (candidatesQueue[sessionId]) {
      while(candidatesQueue[sessionId].length) {
        var candidate = candidatesQueue[sessionId].shift();
        webRtcEndpoint.addIceCandidate(candidate);
      }
    }

        webRtcEndpoint.on('OnIceCandidate', function(event) {
            var candidate = kurento.getComplexType('IceCandidate')(event.candidate);
            /*ws.send(JSON.stringify({
                id : 'iceCandidate',
                candidate : candidate
            }));*/
            socket.emit({
              id : 'iceCandidate',
              candidate : candidate
            });
        });

    webRtcEndpoint.processOffer(sdpOffer, function(error, sdpAnswer) {
      if (error) {
        stop(sessionId);
        return callback(error);
      }
      if (presenter === null) {
        stop(sessionId);
        return callback(noPresenterMessage);
      }

      presenter.webRtcEndpoint.connect(webRtcEndpoint, function(error) {
        if (error) {
          stop(sessionId);
          return callback(error);
        }
        if (presenter === null) {
          stop(sessionId);
          return callback(noPresenterMessage);
        }

        callback(null, sdpAnswer);
            webRtcEndpoint.gatherCandidates(function(error) {
                if (error) {
                  stop(sessionId);
                  return callback(error);
                }
            });
        });
      });
  });
}

function clearCandidatesQueue(sessionId) {
  if (candidatesQueue[sessionId]) {
    delete candidatesQueue[sessionId];
  }
}

function stop(sessionId) {
  if (presenter !== null && presenter.id == sessionId) {
    /*for (var i in viewers) {
      var viewer = viewers[i];
      if (viewer.ws) {
        viewer.ws.send(JSON.stringify({
          id : 'stopCommunication'
        }));
      }
    }*/
  socket.emit({
    id : 'stopCommunication'
  });

    presenter.pipeline.release();
    presenter = null;
    viewers = [];

  } else if (viewers[sessionId]) {
    viewers[sessionId].webRtcEndpoint.release();
    delete viewers[sessionId];
  }

  clearCandidatesQueue(sessionId);

  if (viewers.length < 1 && !presenter) {
        console.log('Closing kurento client');
        console.log(kurentoClient)
        if(kurentoClient != null){kurentoClient.close();}
        kurentoClient = null;
  }
}

function onIceCandidate(sessionId, _candidate) {
    var candidate = kurento.getComplexType('IceCandidate')(_candidate);

    if (presenter && presenter.id === sessionId && presenter.webRtcEndpoint) {
        console.info('Sending presenter candidate');
        presenter.webRtcEndpoint.addIceCandidate(candidate);
    }
    else if (viewers[sessionId] && viewers[sessionId].webRtcEndpoint) {
        console.info('Sending viewer candidate');
        viewers[sessionId].webRtcEndpoint.addIceCandidate(candidate);
    }
    else {
        console.info('Queueing candidate');
        if (!candidatesQueue[sessionId]) {
            candidatesQueue[sessionId] = [];
        }
        candidatesQueue[sessionId].push(candidate);
    }
}


function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

//app.use(express.static(path.join(__dirname, 'static')));
